#include <iostream>

struct Node {
    int data;
    Node* next;
    
    Node(int value) : data(value), next(nullptr) {}
};

void sortedInsert(Node*& head, Node* newNode) {
    if (head == nullptr || head->data >= newNode->data) {
        newNode->next = head;
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != nullptr && current->next->data < newNode->data) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

void insertionSort(Node*& head) {
    Node* sorted = nullptr;
    Node* current = head;
    while (current != nullptr) {
        Node* next = current->next;
        sortedInsert(sorted, current);
        current = next;
    }
    head = sorted;
}

void printList(Node* head) {
    while (head != nullptr) {
        std::cout << head->data << " ";
        head = head->next;
    }
    std::cout << std::endl;
}

void push(Node*& head, int value) {
    Node* newNode = new Node(value);
    newNode->next = head;
    head = newNode;
}

int main() {
    Node* head = nullptr;
    int n;
    
    std::cout << "Enter the number of elements in the linked list: ";
    std::cin >> n;
    
    std::cout << "Enter the elements of the linked list: ";
    for (int i = 0; i < n; ++i) {
        int value;
        std::cin >> value;
        push(head, value);
    }

    std::cout << "Original list: ";
    printList(head);

    insertionSort(head);

    std::cout << "Sorted list: ";
    printList(head);

    return 0;
}
